services:
  web:
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
      args:
        CONTAINER_USER: ${CONTAINER_USER}
        CONTAINER_PASSWORD: ${CONTAINER_PASSWORD}
    image: pbi_manager
    # '/start' is the shell script used to run the service
    command: /start.sh
    # this volume is used to map the files and folders on the host to the container
    # so if we change code on the host, code in the docker container will also be changed
    volumes:
      - .:/app
    ports:
      - 8010:8000
    # env_file is used to manage the env variables of our project
    env_file:
      - ./.run-env/.run-env        
    environment:
      - SQL_DATABASE=${SQL_DATABASE}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - CONTAINER_USER=${CONTAINER_USER}
      - CONTAINER_PASSWORD=${CONTAINER_PASSWORD}
    depends_on:
      - redis
      - db
    user: ${CONTAINER_USER}
  
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
        - POSTGRES_DB=${SQL_DATABASE}
        - POSTGRES_USER=${SQL_USER}
        - POSTGRES_PASSWORD=${SQL_PASSWORD}
  redis:
    image: redis:7-alpine

  celery_worker:
    image: pbi_manager
    command: /start-celeryworker.sh
    volumes:
      - .:/app
    env_file:
      - ./.run-env/.run-env
    depends_on:
      - redis
      - db
    user: ${CONTAINER_USER}

  celery_beat:
    image: pbi_manager
    command: /start-celerybeat.sh
    volumes:
      - .:/app
    env_file:
      - ./.run-env/.run-env
    depends_on:
      - redis
      - db
      - web
    user: ${CONTAINER_USER}

volumes:
  postgres_data: